using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace LeaderboardService.Services
{
    public class LeaderboardService
    {
        private readonly ConcurrentDictionary<long, decimal> _scores = new();
        private readonly object _lock = new();
        private List<(long CustomerId, decimal Score)> _sortedLeaderboard = new();
        private bool _dirty = true;

        // Update score and maintain leaderboard
        public decimal UpdateScore(long customerId, decimal delta)
        {
            _scores.AddOrUpdate(customerId, delta, (id, oldScore) => oldScore + delta);
            lock (_lock)
            {
                _dirty = true;
            }
            return _scores[customerId];
        }

        // Get sorted leaderboard (only customers with score > 0)
        private List<(long CustomerId, decimal Score)> GetSortedLeaderboard()
        {
            lock (_lock)
            {
                if (_dirty)
                {
                    _sortedLeaderboard = _scores
                        .Where(x => x.Value > 0)
                        .OrderByDescending(x => x.Value)
                        .ThenBy(x => x.Key)
                        .Select(x => (x.Key, x.Value))
                        .ToList();
                    _dirty = false;
                }
                return _sortedLeaderboard;
            }
        }

        // Get customers by rank
        public List<(long CustomerId, decimal Score, int Rank)> GetByRank(int start, int end)
        {
            var leaderboard = GetSortedLeaderboard();
            var result = new List<(long, decimal, int)>();
            for (int i = start - 1; i < end && i < leaderboard.Count; i++)
            {
                var entry = leaderboard[i];
                result.Add((entry.CustomerId, entry.Score, i + 1));
            }
            return result;
        }

        // Get customer and neighbors by customerId
        public List<(long CustomerId, decimal Score, int Rank)> GetByCustomerId(long customerId, int high, int low)
        {
            var leaderboard = GetSortedLeaderboard();
            int idx = leaderboard.FindIndex(x => x.CustomerId == customerId);
            if (idx == -1) return new List<(long, decimal, int)>();
            int start = Math.Max(0, idx - high);
            int end = Math.Min(leaderboard.Count - 1, idx + low);
            var result = new List<(long, decimal, int)>();
            for (int i = start; i <= end; i++)
            {
                var entry = leaderboard[i];
                result.Add((entry.CustomerId, entry.Score, i + 1));
            }
            return result;
        }
    }
}

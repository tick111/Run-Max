@page
@model IndexModel
@{
    ViewData["Title"] = "Leaderboard";
}

<div class="container py-4">
    <div class="row g-4">
        <div class="col-lg-5">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <strong>Update / Add Score</strong>
                </div>
                <div class="card-body">
                    <form method="post" class="row g-3" id="update-form">
                        <div class="col-md-6">
                            <label asp-for="CustomerId" class="form-label"></label>
                            <input asp-for="CustomerId" class="form-control" />
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Delta" class="form-label"></label>
                            <input asp-for="Delta" class="form-control" />
                        </div>
                        <div class="col-12 d-flex gap-2">
                            <button type="submit" class="btn btn-primary flex-grow-1">Apply Delta</button>
                            <button type="button" id="btn-live-toggle" class="btn btn-outline-secondary" data-live="on" title="Toggle auto refresh">Live: On</button>
                        </div>
                        <div class="col-12">
                            <small class="text-muted">Delta must be between -1000 and 1000. Positive cumulative score places customer on the board.</small>
                        </div>
                    </form>
                    @if (!string.IsNullOrWhiteSpace(Model.Message))
                    {
                        <div class="alert alert-info mt-3 mb-0" id="server-msg">@Model.Message</div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-7">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center flex-wrap gap-2">
                    <div class="d-flex align-items-center gap-2">
                        <strong>Top Leaderboard</strong>
                        <div class="input-group input-group-sm" style="width:140px;">
                            <span class="input-group-text">Top</span>
                            <input type="number" min="1" max="200" value="@Model.TopCount" id="topCount" class="form-control" />
                        </div>
                        <button class="btn btn-sm btn-outline-light" id="btn-refresh" title="Refresh now">Refresh</button>
                    </div>
                    <form id="neighbors-form" class="d-flex gap-2 align-items-center" onsubmit="return false;">
                        <input type="number" min="1" class="form-control form-control-sm" placeholder="Customer Id" id="neighborId" />
                        <input type="number" min="0" class="form-control form-control-sm" placeholder="High" id="neighborHigh" value="3" />
                        <input type="number" min="0" class="form-control form-control-sm" placeholder="Low" id="neighborLow" value="3" />
                        <button class="btn btn-sm btn-outline-light" id="btn-neighbors" title="Get neighbors">Neighbors</button>
                    </form>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-sm mb-0 align-middle" id="lb-table">
                            <thead class="table-light">
                                <tr>
                                    <th style="width:70px">Rank</th>
                                    <th>Customer</th>
                                    <th style="width:140px">Score</th>
                                </tr>
                            </thead>
                            <tbody id="lb-body">
                            @foreach (var e in Model.TopEntries)
                            {
                                <tr data-id="@e.CustomerId">
                                    <td>@e.Rank</td>
                                    <td>@e.CustomerId</td>
                                    <td class="score" data-score="@e.Score">@e.Score</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div id="lb-empty" class="p-3 text-muted @(Model.TopEntries.Any() ? "d-none" : "")">No active customers yet.</div>
                </div>
                <div class="card-footer small text-muted d-flex justify-content-between">
                    <span id="last-updated">Loaded @DateTime.UtcNow.ToString("HH:mm:ss") UTC</span>
                    <span id="status" class="text-secondary">Idle</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div id="neighbors-section" class="d-none">
                <h5>Neighbors for <span id="neighbors-target"></span></h5>
                <div class="table-responsive">
                    <table class="table table-bordered table-sm" id="neighbors-table">
                        <thead class="table-light"><tr><th>Rank</th><th>Customer</th><th>Score</th></tr></thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
(function(){
    const form = document.getElementById('update-form');
    const lbBody = document.getElementById('lb-body');
    const lbEmpty = document.getElementById('lb-empty');
    const statusEl = document.getElementById('status');
    const lastEl = document.getElementById('last-updated');
    const topCountInput = document.getElementById('topCount');
    const btnRefresh = document.getElementById('btn-refresh');
    const btnLiveToggle = document.getElementById('btn-live-toggle');
    let live = true; let timer = null; let cache = new Map();

    function setStatus(msg){ statusEl.textContent = msg; }
    function fmt(num){ return Number(num).toLocaleString(undefined,{maximumFractionDigits:2}); }

    async function load(){
        const top = Number(topCountInput.value)||20;
        setStatus('Loading...');
        try{
            const res = await fetch(`/leaderboard?start=1&end=${top}`);
            if(!res.ok) throw new Error(res.statusText);
            const data = await res.json();
            render(data);
            lastEl.textContent = 'Loaded ' + new Date().toLocaleTimeString() + ' local';
            setStatus('OK');
        }catch(e){ setStatus('Error'); console.error(e); }
    }

    function render(list){
        if(!Array.isArray(list) || list.length===0){ lbBody.innerHTML=''; lbEmpty.classList.remove('d-none'); return; }
        lbEmpty.classList.add('d-none');
        const rows=[]; const newCache = new Map();
        list.forEach(e=>{ newCache.set(e.customerId||e.CustomerId, e); });
        list.forEach(e=>{
            const id = e.customerId||e.CustomerId; const score = e.score||e.Score; const rank = e.rank||e.Rank;
            const prev = cache.get(id); const changed = prev && prev.Score !== score && prev.score !== score;
            rows.push(`<tr data-id="${id}" class="${changed? 'table-warning':''}"><td>${rank}</td><td>${id}</td><td class='score' data-score='${score}'>${fmt(score)}</td></tr>`);
        });
        lbBody.innerHTML = rows.join('');
        cache = newCache;
        if(live) setTimeout(()=>{ document.querySelectorAll('#lb-table tr.table-warning').forEach(r=>r.classList.remove('table-warning')); },1200);
    }

    function schedule(){ if(timer) clearTimeout(timer); if(live){ timer=setTimeout(load,4000);} }

    form.addEventListener('submit',()=>{ live && schedule(); });
    topCountInput.addEventListener('change',()=>{ load(); });
    btnRefresh.addEventListener('click',()=>{ load(); });
    btnLiveToggle.addEventListener('click',()=>{ live = !live; btnLiveToggle.dataset.live = live? 'on':'off'; btnLiveToggle.textContent = 'Live: ' + (live? 'On':'Off'); if(live){ load(); } else { if(timer) clearTimeout(timer); } });

    // Neighbors feature
    const neighborBtn = document.getElementById('btn-neighbors');
    neighborBtn.addEventListener('click', async ()=>{
        const id = document.getElementById('neighborId').value; if(!id) return;
        const high = Number(document.getElementById('neighborHigh').value)||0;
        const low = Number(document.getElementById('neighborLow').value)||0;
        const sec = document.getElementById('neighbors-section');
        const tbody = document.querySelector('#neighbors-table tbody');
        sec.classList.remove('d-none');
        document.getElementById('neighbors-target').textContent = id;
        tbody.innerHTML = '<tr><td colspan="3">Loading...</td></tr>';
        try{
            const res = await fetch(`/leaderboard/${id}?high=${high}&low=${low}`);
            if(res.status===404){ tbody.innerHTML = '<tr><td colspan="3" class="text-muted">Customer not on leaderboard.</td></tr>'; return; }
            const data = await res.json();
            if(!Array.isArray(data)||data.length===0){ tbody.innerHTML='<tr><td colspan="3" class="text-muted">None</td></tr>'; return; }
            tbody.innerHTML = data.map(e=>`<tr><td>${e.rank||e.Rank}</td><td>${e.customerId||e.CustomerId}</td><td>${fmt(e.score||e.Score)}</td></tr>`).join('');
        }catch(e){ tbody.innerHTML = '<tr><td colspan="3" class="text-danger">Error</td></tr>'; }
    });

    // Initial auto refresh loop
    (function loop(){ load().finally(schedule); })();
})();
</script>
}
